"" ========================================================
"" Base Settings
"" ========================================================
set scrolloff=10
set history=1000
set number relativenumber
set showmode
set showcmd
set smartcase
set incsearch
set hlsearch
set visualbell

" Clipboard Integration
set clipboard+=unnamed

" Leader Key
let mapleader=" "

" Default Behavior
set gdefault

" iIdeaVim Specific Settings
set ideajoin
set ideamarks
set idearefactormode=normal
set ideastatusicon=gray


"" ========================================================
"" Plugin Settings
"" ========================================================
set exchange
set commentary
set ReplaceWithRegister
set surround
set nerdtree
map <C-space> :NERDTreeToggle<CR>


" Searching Plugins
set sneak
set easymotion
let g:EasyMotion_override_acejump = 0

map <leader><leader>k <Plug>(easymotion-k)
let g:WhichKeyDesc_easymotion_up = "<leader><leader>k look up"

map <leader><leader>j <Plug>(easymotion-j)
let g:WhichKeyDesc_easymotion_down = "<leader><leader>j look down"

map <leader><leader>h <Plug>(easymotion-b)
let g:WhichKeyDesc_easymotion_left = "<leader><leader>h look left"

map <leader><leader>l <Plug>(easymotion-w)
let g:WhichKeyDesc_jeasymotion_right = "<leader><leader>l look right"


" Highlighting Plugins
set highlightedyank
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']


" Object Plugins
set textobj-entire
set indent-object
set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"


" Which-key settings
set which-key
set notimeout
let g:WhichKey_FontSize = 18
let g:WhichKey_PrefixColor = "#7B659A"
let g:WhichKey_CommandColor = "#FFFFFF"
let g:WhichKey_PrefixStyle = "bold"
" let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "true"


"" ========================================================
"" Key Mappings
"" ========================================================
" Tab navigation
nmap <S-l> <Action>(PreviousTab)
nmap <S-h> <Action>(NextTab)

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" Navigation actions
nmap <C-i> <Action>(Back)
nmap <C-o> <Action>(Forward)

" Jump between methods
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" Visual indentation
vnoremap < <gv
vnoremap > >gv

" IDE interaction
nmap <C-m> <Action>(ShowPopupMenu)
nmap <C-S-m> <Action>(ToolWindowsGroup)

"" ========================================================
"" Leader Commands
"" ========================================================

nnoremap <leader>/ :noh<return>
let g:WhichKeyDesc_slash = "<leader>/ Clear Search Highlight"

" Information commands
let g:WhichKeyDesc_info = "<leader>i Information"

nmap <leader>ie <action>(ShowErrorDescription)
let g:WhichKeyDesc_info_error = "<leader>ie Error Description"

nmap <leader>it <action>(ExpressionTypeInfo)
let g:WhichKeyDesc_info_type = "<leader>it Expression Type"

nmap <leader>ip <action>(ParameterInfo)
let g:WhichKeyDesc_info_parameter = "<leader>ip Parameter Info"

nmap <leader>ij <action>(QuickJavaDoc)
let g:WhichKeyDesc_info_javadoc = "<leader>ij Java Doc"

nmap <leader>if <action>(FileStructurePopup)
let g:WhichKeyDesc_info_file_structure = "<leader>if File Structure"

nmap <leader>iU <action>(ShowUmlDiagram)
let g:WhichKeyDesc_info_uml_diagram = "<leader>iU UML Diagram"

nmap <leader>ih <action>(CallHierarchy)
let g:WhichKeyDesc_info_call_hierarchy = "<leader>ih Call Hierarchy"

nmap <leader>iu <action>(ShowUsages)
let g:WhichKeyDesc_info_show_usages = "<leader>iu Usages"

nmap <leader>im <action>(MethodHierarchy)
let g:WhichKeyDesc_info_method_hierarchy = "<leader>im Method Hierarchy"


" Window splits
let g:WhichKeyDesc_window = "<leader>w Window splits"

nmap <leader>w| <action>(SplitVertically)
let g:WhichKeyDesc_window_split_vertically = "<leader>w| Split vertically"

ndowsnmap <leader>w- <action>(SplitHorizontally)
let g:WhichKeyDesc_window_split_horizontally = "<leader>w- Split horizontally"

nmap <leader>ww <action>(Unsplit)
let g:WhichKeyDesc_window_split_unsplit = "<leader>ww Unsplit"

nmap <leader>wm <action>(MoveEditorToOppositeTabGroup)
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"

nmap <leader>wb <action>(Back)
let g:WhichKeyDesc_window_split_back = "<leader>wb Back split"

nmap <leader>wf <action>(Forward)
let g:WhichKeyDesc_window_split_forward = "<leader>wf Forward split"


" Tab (Buffer)
let g:WhichKeyDesc_tabs = "<leader>b Buffer"

nmap <leader>bb <Action>(NextTab)
let g:WhichKeyDesc_tabs_next = "<leader>bb Next"

nmap <leader>bp <Action>(PinActiveEditorTab)
let g:WhichKeyDesc_tabs_pin = "<leader>bp Toggle pin"

nmap <leader>bd <Action>(CloseContent)
let g:WhichKeyDesc_tabs_close = "<leader>bd Delete buffer"

nmap <leader>bD <Action>(CloseAllEditors)
let g:WhichKeyDesc_tabs_close_all = "<leader>bD Delete all buffers"

nmap <leader>bo <Action>(CloseAllEditorsButActive)
let g:WhichKeyDesc_tabs_close_all_but_active = "<leader>bo Delete other buffers"

nmap <leader>bP <Action>(CloseAllUnpinnedEditors)
let g:WhichKeyDesc_tabs_close_all_unpinned = "<leader>bP Delete non-pinned buffers"

" UI options
let g:WhichKeyDesc_ui = "<leader>u UI options"

map <leader>ud <action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_ui_dfm = "<leader>ud Toggle Distraction-Free mode"

map <leader>uz <action>(ToggleZenMode)
let g:WhichKeyDesc_ui_zen = "<leader>uz Toggle Zen mode"

map <leader>uf <action>(ToggleFullScreen)
let g:WhichKeyDesc_fullscreen = "<leader>uf Toggle full screen"


" File navigation
let g:WhichKeyDesc_file_opt = "<leader>f File navigation"

nmap <leader>ff <Action>(GotoFile)
let g:WhichKeyDesc_file_opt_goto_file = "<leader>ff Go To File"

nmap <leader>fg <Action>(RecentFiles)
let g:WhichKeyDesc_file_opt_show_recent_files = "<leader>fg Recent Files"

nmap <leader>fw <Action>(FindInPath)
let g:WhichKeyDesc_file_opt_goto_content = "<leader>fw Grep"

nmap <leader>fo <Action>(RecentLocations)
let g:WhichKeyDesc_file_opt_show_recent_locations = "<leader>fo Recent Locations"

nmap <leader>fs <Action>(NewScratchFile)
let g:WhichKeyDesc_file_opt_new_scratch_file = "<leader>fs New Scratch File"

nmap <leader>fO <Action>(OpenFile)
let g:WhichKeyDesc_file_opt_toggle_nerdtree = "<leader>fO Open File"

nmap <leader>fy <Action>(CopyAbsolutePath)
let g:WhichKeyDesc_file_opt_copy_path = "<leader>fy Copy Path"

nmap <leader>fP <Action>(ManageRecentProjects)
let g:WhichKeyDesc_file_opt_recent_projects = "<leader>Projects"

nmap <leader>fh <Action>(LocalHistory.ShowHistory)
let g:WhichKeyDesc_file_opt_history = "<leader>fh Show History"

nmap <leader>fi <Action>(SelectIn)
let g:WhichKeyDesc_file_opt_select_in = "<leader>fi Select In"

nmap <leader>fr <Action>(ReplaceInPath)
let g:WhichKeyDesc_file_opt_replace_in_path = "<leader>fr Replace In Path"


" Search
let g:WhichKeyDesc_search = "<leader>s Search"

nmap <leader>ss <action>(SearchEverywhere)
let g:WhichKeyDesc_search_everywhere = "<leader>ss Search Everywhere"

nmap <leader>su <Action>(FindUsages)
let g:WhichKeyDesc_search_usages = "<leader>su Find Usages"

nmap <leader>sn <Action>(ShowNavBar)
let g:WhichKeyDesc_search_nav_bar = "<leader>sn Scope Search"

nmap <leader>sa <Action>(GotoAction)
let g:WhichKeyDesc_search_action = "<leader>sa Search Action"

nmap <leader>sc <Action>(GotoClass)
let g:WhichKeyDesc_search_class = "<leader>sc Search Class"

nmap <leader>sS <Action>(GotoSymbol)
let g:WhichKeyDesc_search_symbol = "<leader>ss Search Symbol"

nmap <leader>st <Action>(TextSearchAction)
let g:WhichKeyDesc_search_text = "<leader>st Search Text"


" Run Actions
let g:WhichKeyDesc_run = "<leader>r Run"

nmap <leader>rm <action>(RunMenu)
let g:WhichKeyDesc_run_menu = "<leader>rm Run Menu"

nmap <leader>rn <action>(RunClass)
let g:WhichKeyDesc_run_class = "<leader>rn Run Class"

nmap <leader>rc <Action>(ContextRun)
let g:WhichKeyDesc_run_context = "<leader>rc Context Run"

nmap <leader>rr <action>(Rerun)
let g:WhichKeyDesc_run_rerun = "<leader>rr Rerun"

nmap <leader>rt <Action>(RunTests)
let g:WhichKeyDesc_run_tests = "<leader>rt Run Tests"

nmap <leader>rf <action>(RerunFailedTests)
let g:WhichKeyDesc_run_failed = "<leader>rf Rerun Failed Tests"

nmap <leader>rs <Action>(Stop)
let g:WhichKeyDesc_run_stop = "<leader>rs Stop"

nmap <leader>rC <action>(ChooseRunConfiguration)
let g:WhichKeyDesc_run_choose_configuration = "<leader>rC Choose Run Configuration"


" Debugging commands
let g:WhichKeyDesc_debugging = "<leader>d Debugging"

nmap <leader>dx <Action>(Debug)
let g:WhichKeyDesc_debug_execute = "<leader>dx Execute Debug"

nmap <leader>dc <Action>(ContextDebug)
let g:WhichKeyDesc_debug_context = "<leader>dc Context Debug"

nmap <leader>dv <Action>(ViewBreakpoints)
let g:WhichKeyDesc_debug_view_breakpoints = "<leader>dv View Breakpoints"

nmap <leader>de <Action>(EditBreakpoint)
let g:WhichKeyDesc_debug_edit_breakpoints = "<leader>de Edit Breakpoints"

nmap <leader>dm <Action>(XDebugger.MuteBreakpoints)
let g:WhichKeyDesc_debug_mute_breakpoints = "<leader>dm Mute Breakpoints"

nmap <leader>dt <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debug_toggle_line_breakpoint = "<leader>dt Toggle Line Breakpoint"

nmap <leader>dC <Action>(RunToCursor)
let g:WhichKeyDesc_debug_run_to_cursor = "<leader>dC Run to Cursor"

nmap <leader>di <Action>(StepInto)
let g:WhichKeyDesc_debug_step_into = "<leader>di Step Into"

nmap <leader>do <Action>(StepOver)
let g:WhichKeyDesc_debug_step_over = "<leader>do Step Over"

nmap <leader>dr <Action>(Resume)
let g:WhichKeyDesc_debug_resume = "<leader>dr Resume Debugging"

nmap <leader>dR <Action>(EvaluateExpression)
let g:WhichKeyDesc_debug_evaluate_expression = "<leader>dR Evaluate Expression"

nmap <leader>dt <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_debug_activate_tool_window = "<leader>dt Activate Debug Tool Window"


" Language Actions
let g:WhichKeyDesc_language = "<leader>l Language"

nmap <leader>ll <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_language_menu = "<leader>ll Refactor Menu"

nmap <leader>lr <Action>(RenameElement)
let g:WhichKeyDesc_language_rename = "<leader>lr Rename"

nmap <leader>ls <Action>(ChangeSignature)
let g:WhichKeyDesc_language_change_signature = "<leader>lc Change Signature"

nmap <leader>lv <Action>(IntroduceVariable)
let g:WhichKeyDesc_language_introduce_variable = "<leader>lv Introduce Variable"

nmap <leader>li <Action>(Inline)
let g:WhichKeyDesc_language_inline_variable = "<leader>li Inline"

nmap <leader>lf <Action>(IntroduceField)
let g:WhichKeyDesc_language_introduce_field = "<leader>lf Introduce Field"

nmap <leader>lm <Action>(ExtractMethod)
let g:WhichKeyDesc_language_extract_method = "<leader>lm Extract Method"

nmap <leader>lc <Action>(IntroduceConstant)
let g:WhichKeyDesc_language_introduce_constant = "<leader>lc Introduce Constant"

nmap <leader>lp <Action>(IntroduceParameter)
let g:WhichKeyDesc_language_introduce_parameter = "<leader>lp Introduce Parameter"

nmap <leader>lo <Action>(IntroduceParameterObject)
let g:WhichKeyDesc_language_introduce_param_object = "<leader>lo Introduce Parameter Object"

nmap <leader>le <Action>(EncapsulateFields)
let g:WhichKeyDesc_language_encapsulate = "<leader>le Encapsulate Fields"

nmap <leader>la <Action>(ShowIntentionActions)
let g:WhichKeyDesc_language_show_intention_actions = "<leader>la Intention Actions"

nmap <leader>lR <Action>(ReformatCode)
let g:WhichKeyDesc_language_reformat_code = "<leader>lR Reformat Code"

nmap <leader>lI <Action>(InspectCode)
let g:WhichKeyDesc_language_inspect_code = "<leader>lI Inspect Code"

nmap <leader>lG <Action>(Generate)
let g:WhichKeyDesc_language_generate = "<leader>lG Generate"


""" Bookmarks
let g:WhichKeyDesc_bookmarks = "<leader>j Jump To"

nmap <leader>jb <Action>(Bookmarks)
let g:WhichKeyDesc_bookmarks_menu = "<leader>jb Bookmark Menu"

nmap <leader>js <Action>(ShowBookmarks)
let g:WhichKeyDesc_bookmarks_show = "<leader>js Bookmarks"

nmap <leader>jw <Action>(ActivateBookmarksToolWindow)
let g:WhichKeyDesc_bookmarks_tool = "<leader>jW Window"

nmap <leader>jt <Action>(ToggleBookmark)
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>jt Toggle Bookmark"

nmap <leader>je <Action>(EditBookmark)
let g:WhichKeyDesc_bookmarks_edit = "<leader>je Edit Bookmark"

nmap <leader>jp <Action>(GotoPreviousBookmark)
let g:WhichKeyDesc_bookmarks_prev = "<leader>jp Previous Bookmakr"

nmap <leader>jn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks_next = "<leader>jn Next Bookmark"

nmap <leader>j1 <Action>(GoToTab1)
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>j1 Tab 1"

nmap <leader>j2 <Action>(GoToTab2)
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>j2 Tab 2"

nmap <leader>j3 <Action>(GoToTab3)
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>j3 Tab 3"

nmap <leader>j4 <Action>(GoToTab4)
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>j4 Tab 4"

nmap <leader>j5 <Action>(GoToTab5)
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>j5 Tab 5"

nmap <leader>j6 <Action>(GoToTab6)
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>j6 Tab 6"

nmap <leader>j7 <Action>(GoToTab7)
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>j7 Tab 7"

nmap <leader>j8 <Action>(GoToTab8)
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>j8 Tab 8"

nmap <leader>j9 <Action>(GoToTab9)
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>j9 Tab 9"


" Go To
let g:WhichKeyDesc_goto = "<leader>g Go To"

nmap <leader>gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_goto_declaration = "<leader>gd Declaration"

nmap <leader>go <Action>(GotoSuperMethod)
let g:WhichKeyDesc_goto_super_method = "<leader>go Super Method"

nmap <leader>gT <Action>(GotoTypeDeclaration)
let g:WhichKeyDesc_goto_type_declaration = "<leader>gT Type Declaration"

nmap <leader>gI <Action>(GotoImplementation)
let g:WhichKeyDesc_goto_implementation = "<leader>gI Implementation"

nmap <leader>gt <Action>(GotoTest)
let g:WhichKeyDesc_goto_test = "<leader>gt Test"


" Case Conversion, broken.
let g:WhichKeyDesc_case_conversion = "<leader>c Case Conversion (!)"

vmap <leader>cm <Action>(me.laria.code.idea_caseconv.convert_case_menu)
let g:WhichKeyDesc_change_case_menu = "<leader>cm Case Menu"

vmap <leader>cc <Action>(me.laria.code.idea_caseconv.CamelCaseAction)
let g:WhichKeyDesc_case_conversion_camel = "<leader>cc camelCase"

vmap <leader>cp <Action>(me.laria.code.idea_caseconv.PascalCaseAction)
let g:WhichKeyDesc_case_conversion_pascal = "<leader>cp PascalCase"

vmap <leader>cs <Action>(me.laria.code.idea_caseconv.SnakeCaseAction)
let g:WhichKeyDesc_case_conversion_snake = "<leader>cs snake_case"

vmap <leader>cS <Action>(me.laria.code.idea_caseconv.ScreamingSnakeCaseAction)
let g:WhichKeyDesc_case_conversion_screaming_snake = "<leader>cS SCREAMING_SNAKE_CASE"

vmap <leader>cl <Action>(me.laria.code.idea_caseconv.LowerCaseAction)
let g:WhichKeyDesc_case_conversion_lower = "<leader>cl lowercase"

vmap <leader>cu <Action>(me.laria.code.idea_caseconv.UpperCaseAction)
let g:WhichKeyDesc_case_conversion_upper = "<leader>cu UPPERCASE"

vmap <leader>c. <Action>(me.laria.code.idea_caseconv.DotCaseAction)
let g:WhichKeyDesc_case_conversion_dot = "<leader>c. dot.case"

vmap <leader>cw <Action>(me.laria.code.idea_caseconv.SeparateWordsAction)
let g:WhichKeyDesc_case_conversion_words = "<leader>cw Separate Words"

vmap <leader>ct <Action>(me.laria.code.idea_caseconv.TitleCaseAction)
let g:WhichKeyDesc_case_conversion_title = "<leader>ct Title Case"

vmap <leader>c- <Action>(me.laria.code.idea_caseconv.DashCaseAction)
let g:WhichKeyDesc_case_conversion_dash = "<leader>c- dash-case"

vmap <leader>cd <Action>(me.laria.code.idea_caseconv.SentenceCaseAction)
let g:WhichKeyDesc_case_conversion_sentence = "<leader>cd Sentence case"


" Git (v for version)
let g:WhichKeyDesc_git = "<leader>v Git"

nmap <leader>vv <Action>(VcsGroups)
let g:WhichKeyDesc_git_menu = "<leader>vv Menu"

nmap <leader>vc <Action>(Vcs.Show.Local.Changes)
let g:WhichKeyDesc_git_local_changes = "<leader>vc Show Local Changes"

nmap <leader>vb <Action>(Git.Branches)
let g:WhichKeyDesc_git_branches = "<leader>vb Branches"

nmap <leader>vf <Action>(Git.Fetch)
let g:WhichKeyDesc_git_fetch = "<leader>vf Fetch"

nmap <leader>vp <Action>(Vcs.Push)
let g:WhichKeyDesc_git_push = "<leader>vp Push"

nmap <leader>vP <Action>(Git.Commit.And.Push.Executor)
let g:WhichKeyDesc_git_commit_and_push = "<leader>vP Commit & Push"

nmap <leader>vO <Action>(Github.View.Pull.Request)
let g:WhichKeyDesc_git_open_pull_requests = "<leader>vo Open Pull Requests"

nmap <leader>vg <Action>(CheckinProject)
let g:WhichKeyDesc_git_checkin = "<leader>vg Checkin"

nmap <leader>va <Action>(Annotate)
let g:WhichKeyDesc_git_annotate = "<leader>va Annotate"

nmap <leader>vT <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_git_tool = "<leader>vT Tool"

nmap <leader>vr <Action>(Vcs.RollbackChangedLines)
let g:WhichKeyDesc_git_rollback_changed_lines = "<leader>vr Rollback"

nmap <leader>vu <Action>(Vcs.UpdateProject)
let g:WhichKeyDesc_git_update_project = "<leader>vu Update Project"
