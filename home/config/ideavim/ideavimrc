"" ========================================================
"" Base Settings
"" ========================================================
set scrolloff=10
set history=1000
set number relativenumber
set showmode
set showcmd
set smartcase
set incsearch
set hlsearch
set visualbell

" Clipboard Integration
set clipboard+=unnamedplus

" Leader Key
let mapleader=" "

" Default Behavior
set gdefault

" iIdeaVim Specific Settings
set ideamarks
set idearefactormode=normal
set ideastatusicon=gray


"" ========================================================
"" Plugin Settings
"" ========================================================
" More at https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins

" shift-j smartly join two lines together
set ideajoin

" gc<num> to comment num lines after
set commentary

" cs<from><to>, ex.: cs<! will replace < to ! (<foo> -> !foo!)
set surround

" allows vim motions in standard file tree
set nerdtree

" quick jump to any direction
set easymotion
let g:EasyMotion_override_acejump = 0
" set custom prefix instead of leader
map m <Plug>(easymotion-prefix)
" look up
map mk <Plug>(easymotion-k)
" look down
map mj <Plug>(easymotion-j)
" look left
map mh <Plug>(easymotion-b)
" look right
map ml <Plug>(easymotion-w)

" makes yanked region visible
set highlightedyank

" navigation to a symbol <f> forward or <F> backward by typing
" f<symbol> or F<symbol>.
" Requires quickscope plugin installed in IDE as well to highlight unique
" characters https://plugins.jetbrains.com/plugin/19417-ideavim-quickscope
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" selecting, changing and deleting an argument,
" ex.: daa will delete currect argument, cia - change it, via - select it.
" ex.: foo(<daa>a, b) -> foo(b)
set argtextobj
let g:argtextobj_pairs="[:],(:),<:>,{:}"

" which-key settings
set which-key
set notimeout
let g:WhichKey_FontSize = 18
let g:WhichKey_PrefixColor = "#7B659A"
let g:WhichKey_CommandColor = "#FFFFFF"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "true"


"" ========================================================
"" Key Mappings
"" ========================================================
" Maps an action to a key, more about actions:
" https://github.com/JetBrains/ideavim?tab=readme-ov-file#executing-ide-actions
" :actionlist [keyword] show all available actions filtered by optional
" keyword.
" Tab navigation
nmap <S-h> <Action>(PreviousTab)
nmap <S-l> <Action>(NextTab)

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" Navigation actions
nmap <C-i> <Action>(Back)
nmap <C-o> <Action>(Forward)

" Jump between methods
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" Visual indentation
vnoremap < <gv
vnoremap > >gv

" IDE interaction
nmap <C-m> <Action>(ShowPopupMenu)
nmap <C-S-m> <Action>(ToolWindowsGroup)
nmap - <Action>(ShowNavBar)
map <Tab> <Action>(NextTab)
"" ========================================================
"" Leader Commands
"" ========================================================

nnoremap <leader>/ :noh<return>
let g:WhichKeyDesc_slash = "<leader>/ Clear Search Highlight"

" Information commands
let g:WhichKeyDesc_i = "<leader>i Information"

nmap <leader>ie <action>(ShowErrorDescription)
let g:WhichKeyDesc_ie = "<leader>ie Error Description"

nmap <leader>it <action>(ExpressionTypeInfo)
let g:WhichKeyDesc_it = "<leader>it Expression Type"

nmap <leader>ip <action>(ParameterInfo)
let g:WhichKeyDesc_ip = "<leader>ip Parameter Info"

nmap <leader>ij <action>(QuickJavaDoc)
let g:WhichKeyDesc_ij = "<leader>ij Java Doc"

nmap <leader>if <action>(FileStructurePopup)
let g:WhichKeyDesc_if = "<leader>if File Structure"

nmap <leader>iU <action>(ShowUmlDiagram)
let g:WhichKeyDesc_iU = "<leader>iU UML Diagram"

nmap <leader>ih <action>(CallHierarchy)
let g:WhichKeyDesc_ih = "<leader>ih Call Hierarchy"

nmap <leader>iu <action>(ShowUsages)
let g:WhichKeyDesc_iu = "<leader>iu Usages"

nmap <leader>im <action>(MethodHierarchy)
let g:WhichKeyDesc_im = "<leader>im Method Hierarchy"


" Window splits
let g:WhichKeyDesc_w = "<leader>w Splits"

nmap <leader>wl <action>(SplitVertically)
let g:WhichKeyDesc_wl = "<leader>wl Split Vertically"

nmap <leader>wj <action>(SplitHorizontally)
let g:WhichKeyDesc_wj = "<leader>wj Split Horizontally"

nmap <leader>wu <action>(Unsplit)
let g:WhichKeyDesc_wu = "<leader>wu Unsplit"

nmap <leader>ws <action>(MoveEditorToOppositeTabGroup)
let g:WhichKeyDesc_ws = "<leader>ws Swap Window"

nmap <leader>wb <action>(Back)
let g:WhichKeyDesc_wb = "<leader>wb Go Back"

nmap <leader>wf <action>(Forward)
let g:WhichKeyDesc_wf = "<leader>wf Go Forward"


" Tab (Buffer)
let g:WhichKeyDesc_b = "<leader>b Tab"

nmap <leader>bb <Action>(NextTab)
let g:WhichKeyDesc_bb = "<leader>bb Next Tab"

nmap <leader>bp <Action>(PinActiveEditorTab)
let g:WhichKeyDesc_bp = "<leader>bp Toggle Pin"

nmap <leader>bd <Action>(CloseContent)
let g:WhichKeyDesc_bd = "<leader>bd Close Tab"

nmap <leader>bD <Action>(CloseAllEditors)
let g:WhichKeyDesc_bD = "<leader>bD Close ALL Tabs"

nmap <leader>bo <Action>(CloseAllEditorsButActive)
let g:WhichKeyDesc_bo = "<leader>bo Close other tabs"

nmap <leader>bP <Action>(CloseAllUnpinnedEditors)
let g:WhichKeyDesc_bP = "<leader>bP Delete non-pinned buffers"

nmap <leader>bs <Action>(NewScratchFile)
let g:WhichKeyDesc_bs = "<leader>bs New Scratch File"

" UI options
let g:WhichKeyDesc_u = "<leader>u UI options"

map <leader>ud <action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_ud = "<leader>ud Toggle Distraction-Free mode"

map <leader>uz <action>(ToggleZenMode)
let g:WhichKeyDesc_uz = "<leader>uz Toggle Zen mode"

map <leader>uf <action>(ToggleFullScreen)
let g:WhichKeyDesc_uf = "<leader>uf Toggle full screen"


" Finding
let g:WhichKeyDesc_f = "<leader>f Find"

nmap <leader>fe <action>(SearchEverywhere)
let g:WhichKeyDesc_fe = "<leader>fe Find Everywhere"

nmap <leader><leader> <Action>(GotoFile)
let g:WhichKeyDesc_leader_leader = "<leader><leader> Find File"

nmap <leader>fc <Action>(GotoClass)
let g:WhichKeyDesc_fc = "<leader>fc Find Class"

nmap <leader>fs <Action>(GotoSymbol)
let g:WhichKeyDesc_fs = "<leader>fs Find Symbol"

nmap <C-k> <Action>(GotoAction)
let g:WhichKeyDesc_C_k = "<C>k Find Action"

nmap <leader>fw <Action>(FindInPath)
let g:WhichKeyDesc_fw = "<leader>fw Find Word"

nmap <leader>fr <Action>(ReplaceInPath)
let g:WhichKeyDesc_fr = "<leader>fr Replace In Path"

" Show
let g:WhichKeyDesc_s = "<leader>s Show"

nmap <leader>su <Action>(FindUsages)
let g:WhichKeyDesc_su = "<leader>su Show Usages"

nmap <leader>sl <Action>(RecentLocations)
let g:WhichKeyDesc_sl = "<leader>sl Show Recent Locations"

nmap <leader>sr <Action>(RecentFiles)
let g:WhichKeyDesc_sr = "<leader>sr Show Recent Files"

nmap <leader>sp <Action>(ManageRecentProjects)
let g:WhichKeyDesc_sp = "<leader>sp Show Projects"

nmap <leader>sh <Action>(LocalHistory.ShowHistory)
let g:WhichKeyDesc_sh = "<leader>sh Show History"

nmap <leader>si <Action>(SelectIn)
let g:WhichKeyDesc_si = "<leader>si Select In"

" Run Actions
let g:WhichKeyDesc_r = "<leader>r Run"

nmap <leader>rm <action>(RunMenu)
let g:WhichKeyDesc_rm = "<leader>rm Show This Run Menu"

nmap <leader>rc <Action>(RunClass)
let g:WhichKeyDesc_rc = "<leader>rc Run This"

nmap <leader>rr <action>(Rerun)
let g:WhichKeyDesc_rr = "<leader>rr Rerun"

nmap <leader>rt <Action>(RunTests)
let g:WhichKeyDesc_rt = "<leader>rt Run Tests"

nmap <leader>rf <action>(RerunFailedTests)
let g:WhichKeyDesc_rf = "<leader>rf Rerun Failed Tests"

nmap <leader>rs <Action>(Stop)
let g:WhichKeyDesc_rs = "<leader>rs Stop"

nmap <leader>rC <action>(ChooseRunConfiguration)
let g:WhichKeyDesc_rC = "<leader>rC Choose Run Configuration"


" Debugging commands
let g:WhichKeyDesc_d = "<leader>d Debugging"

nmap <leader>dx <Action>(Debug)
let g:WhichKeyDesc_dx = "<leader>dx Execute Debug"

nmap <leader>dc <Action>(ContextDebug)
let g:WhichKeyDesc_dc = "<leader>dc Context Debug"

nmap <leader>dv <Action>(ViewBreakpoints)
let g:WhichKeyDesc_dv = "<leader>dv View Breakpoints"

nmap <leader>de <Action>(EditBreakpoint)
let g:WhichKeyDesc_de = "<leader>de Edit Breakpoints"

nmap <leader>dm <Action>(XDebugger.MuteBreakpoints)
let g:WhichKeyDesc_dm = "<leader>dm Mute Breakpoints"

nmap <leader>dt <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_dt = "<leader>dt Toggle Line Breakpoint"

nmap <leader>dC <Action>(RunToCursor)
let g:WhichKeyDesc_dC = "<leader>dC Run to Cursor"

nmap <leader>di <Action>(StepInto)
let g:WhichKeyDesc_di = "<leader>di Step Into"

nmap <leader>do <Action>(StepOver)
let g:WhichKeyDesc_do = "<leader>do Step Over"

nmap <leader>dr <Action>(Resume)
let g:WhichKeyDesc_dr = "<leader>dr Resume Debugging"

nmap <leader>dR <Action>(EvaluateExpression)
let g:WhichKeyDesc_dR = "<leader>dR Evaluate Expression"

nmap <leader>dT <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_dT = "<leader>dT Activate Debug Tool Window"


" Language Actions
let g:WhichKeyDesc_l = "<leader>l Language"

nmap <leader>ll <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_ll = "<leader>ll Refactor Menu"

nmap <leader>lr <Action>(RenameElement)
let g:WhichKeyDesc_lr = "<leader>lr Rename"

nmap <leader>ls <Action>(ChangeSignature)
let g:WhichKeyDesc_ls = "<leader>lc Change Signature"

nmap <leader>lv <Action>(IntroduceVariable)
let g:WhichKeyDesc_lv = "<leader>lv Introduce Variable"

nmap <leader>li <Action>(Inline)
let g:WhichKeyDesc_li = "<leader>li Inline"

nmap <leader>lf <Action>(IntroduceField)
let g:WhichKeyDesc_lf = "<leader>lf Introduce Field"

nmap <leader>lm <Action>(ExtractMethod)
let g:WhichKeyDesc_lm = "<leader>lm Extract Method"

nmap <leader>lc <Action>(IntroduceConstant)
let g:WhichKeyDesc_lc = "<leader>lc Introduce Constant"

nmap <leader>lp <Action>(IntroduceParameter)
let g:WhichKeyDesc_lp = "<leader>lp Introduce Parameter"

nmap <leader>lo <Action>(IntroduceParameterObject)
let g:WhichKeyDesc_lo = "<leader>lo Introduce Parameter Object"

nmap <leader>le <Action>(EncapsulateFields)
let g:WhichKeyDesc_le = "<leader>le Encapsulate Fields"

nmap <leader>la <Action>(ShowIntentionActions)
let g:WhichKeyDesc_la = "<leader>la Intention Actions"

nmap <leader>lR <Action>(ReformatCode)
let g:WhichKeyDesc_lR = "<leader>lR Reformat Code"

nmap <leader>lI <Action>(InspectCode)
let g:WhichKeyDesc_lI = "<leader>lI Inspect Code"

nmap <leader>lG <Action>(Generate)
let g:WhichKeyDesc_lG = "<leader>lG Generate"


""" Bookmarks
let g:WhichKeyDesc_j = "<leader>j Jump To"

nmap <leader>jb <Action>(Bookmarks)
let g:WhichKeyDesc_jb = "<leader>jb Bookmark Menu"

nmap <leader>js <Action>(ShowBookmarks)
let g:WhichKeyDesc_js = "<leader>js Bookmarks"

nmap <leader>jw <Action>(ActivateBookmarksToolWindow)
let g:WhichKeyDesc_jW = "<leader>jW Window"

nmap <leader>jt <Action>(ToggleBookmark)
let g:WhichKeyDesc_jt = "<leader>jt Toggle Bookmark"

nmap <leader>je <Action>(EditBookmark)
let g:WhichKeyDesc_je = "<leader>je Edit Bookmark"

nmap <leader>jp <Action>(GotoPreviousBookmark)
let g:WhichKeyDesc_jp = "<leader>jp Previous Bookmakr"

nmap <leader>jn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_jn = "<leader>jn Next Bookmark"

nmap <leader>j1 <Action>(GoToTab1)
let g:WhichKeyDesc_j1 = "<leader>j1 Tab 1"

nmap <leader>j2 <Action>(GoToTab2)
let g:WhichKeyDesc_j2 = "<leader>j2 Tab 2"

nmap <leader>j3 <Action>(GoToTab3)
let g:WhichKeyDesc_j3 = "<leader>j3 Tab 3"

nmap <leader>j4 <Action>(GoToTab4)
let g:WhichKeyDesc_j4 = "<leader>j4 Tab 4"

nmap <leader>j5 <Action>(GoToTab5)
let g:WhichKeyDesc_j5 = "<leader>j5 Tab 5"

nmap <leader>j6 <Action>(GoToTab6)
let g:WhichKeyDesc_j6 = "<leader>j6 Tab 6"

nmap <leader>j7 <Action>(GoToTab7)
let g:WhichKeyDesc_j7 = "<leader>j7 Tab 7"

nmap <leader>j8 <Action>(GoToTab8)
let g:WhichKeyDesc_j8 = "<leader>j8 Tab 8"

nmap <leader>j9 <Action>(GoToTab9)
let g:WhichKeyDesc_j9 = "<leader>j9 Tab 9"


" region Go To
let g:WhichKeyDesc_g = "<leader>g Go To"

nmap <leader>gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_gd = "<leader>gd Declaration"

nmap <leader>go <Action>(GotoSuperMethod)
let g:WhichKeyDesc_go = "<leader>go Super Method"

nmap <leader>gT <Action>(GotoTypeDeclaration)
let g:WhichKeyDesc_gT = "<leader>gT Type Declaration"

nmap <leader>gI <Action>(GotoImplementation)
let g:WhichKeyDesc_gI = "<leader>gI Implementation"

nmap <leader>gt <Action>(GotoTest)
let g:WhichKeyDesc_gt = "<leader>gt Test"


" Git (v for version)
let g:WhichKeyDesc_v = "<leader>v VCS"

nmap <leader>vv <Action>(VcsGroups)
let g:WhichKeyDesc_vv = "<leader>vv Menu"

nmap <leader>vc <Action>(Vcs.Show.Local.Changes)
let g:WhichKeyDesc_vc = "<leader>vc Show Local Changes"

nmap <leader>vb <Action>(Git.Branches)
let g:WhichKeyDesc_vb = "<leader>vb Branches"

nmap <leader>vf <Action>(Git.Fetch)
let g:WhichKeyDesc_vf = "<leader>vf Fetch"

nmap <leader>vp <Action>(Vcs.Push)
let g:WhichKeyDesc_vp = "<leader>vp Push"

nmap <leader>vP <Action>(Git.Commit.And.Push.Executor)
let g:WhichKeyDesc_vP = "<leader>vP Commit & Push"

nmap <leader>vO <Action>(Github.View.Pull.Request)
let g:WhichKeyDesc_vO = "<leader>vo Open Pull Requests"

nmap <leader>vg <Action>(CheckinProject)
let g:WhichKeyDesc_vg = "<leader>vg Checkin"

nmap <leader>va <Action>(Annotate)
let g:WhichKeyDesc_va = "<leader>va Annotate"

nmap <leader>vT <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_vT = "<leader>vT Tool"

nmap <leader>vr <Action>(Vcs.RollbackChangedLines)
let g:WhichKeyDesc_vr = "<leader>vr Rollback"

nmap <leader>vu <Action>(Vcs.UpdateProject)
let g:WhichKeyDesc_vu = "<leader>vu Update Project"


" Other Actions
let g:WhichKeyDesc_a = "<leader>a Action"

nmap <leader>ay <Action>(CopyAbsolutePath)
let g:WhichKeyDesc_ay = "<leader>ay Copy Absolute Path"

